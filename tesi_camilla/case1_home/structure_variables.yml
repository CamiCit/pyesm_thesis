# variables of the model

# table_key:                                  # name of the data table from which variables are defined
#     name: table_name                        # description or full name of the table
#     type: table_type                        # endogenous, exogenous, constant or dictionary 
#     type:                                   # dictionary with keys as problem key and values as table_type 
#         problem_key: table_type
#     coordinates: [a, b, c, d]               # list of table coordinates (set_key symbols)
#     variables_info:                         # list of variables defined from the data_table
#         var_key_1:                          # variable name
#             value: constant_type            # constant value type (predefined)
#             rows:                           # (optional) rows of the variable
#                 set: a                      # set_key symbol
#                 filters: {0: filter_values} # (optional) filters for the set values
#             cols:                           # (optional) cols of the variable
#                 set: b                      # set_key symbol
#                 filters: {0: filter_values} # (optional) filters for the set values
#             intra:                          # (optional) filter on intra-problem sets 
#                 set: c                      # set_key symbol
#                 filters: {0: filter_values} # (optional) filters for the set values


# -----------------------------------------------------------------------------
# exogenous variables

u:
    name: u
    type: exogenous
    coordinates: [scenarios,needs,activities]
    variables_info:
        u:
            rows:
                set: needs
            cols:
                set: activities

d:
    name: d #change of shape from the previous model
    type: exogenous
    coordinates: [scenarios,needs,activities]
    variables_info:
        d:
            rows:
                set: needs
            cols:
                set: activities

cf:
    name: cf
    type: exogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        cf:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: n}

Y:
    name: Y
    type: exogenous
    coordinates: [scenarios,needs,time_hour]
    variables_info:
        Y:
            rows:
                set: needs
            cols:
                set: time_hour

cost_op:
    name: cost_op
    type: exogenous
    coordinates: [scenarios,activities]
    variables_info:
        cost_op:
            cols:
                set: activities

cost_inv:
    name: cost_inv
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        cost_inv:
            cols:
                set: techs

cap_i:
    name: cap_i
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        cap_i:
            cols:
                set: techs

cap_units:
    name: cap_units
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        cap_units:
            cols:
                set: techs      

Act_constr:
    name: Act_constr
    type: exogenous
    coordinates: [scenarios,techs,activities]
    variables_info:
        Act_constr:
            rows:
                set: activities
            cols:
                set: techs

days_per_type:        
    name: Days of each type in one year #The sum must be 365
    type: exogenous
    coordinates: [scenarios,days]
    variables_info:
        days_per_type:
            cols:
                set: days

sf:
    name: seasonal activity limit [0,1]
    type: exogenous
    coordinates: [scenarios,activities,time_hour]
    variables_info:
        sf:
            rows:
                set: time_hour
            cols:
                set: activities
                filters: {seasonal: y}

#Thermal insulation
TI_param:        #0 for all needs except cold (value between [0,1]) and heat (value between [-1,0])
    name: TI_param
    type: exogenous
    coordinates: [scenarios,needs]
    variables_info:
        TI_param:
            rows:
                set: needs

TI_cost:        #0 for all needs except cold (value between [0,1]) and heat (value between [-1,0])
    name: capital investment cost for thermal insulation
    type: exogenous
    coordinates: [scenarios]
    variables_info:
        TI_cost:

#STORAGE exogenous variables
storage_min:        #valore minimo del livelo di storage [0,1]
    name: storage_min
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        storage_min:
            rows:
                set: techs
                filters: {storage: y}

storage_max:        #valore massimo del livelo di storage [0,1]
    name: storage_max
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        storage_max:
            rows:
                set: techs
                filters: {storage: y}

storage_start:        #valore iniziale del livelo di storage [0,1], anche se definito per tutti i tempi, vale solo per la prima ora
    name: storage_start
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        storage_start:
            rows:
                set: techs
                filters: {storage: y}

storage_max_disch:        #da moltiplicare a capacità di storage [kWh] per ottenere la potenza di scarica massima [kW]
    name: storage_max_disch
    type: exogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        storage_max_disch:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: y}

storage_min_charge:        #da moltiplicare a capacità di storage [kWh] per ottenere la potenza di scarica minima [kW], negativo
    name: storage_min_charge
    type: exogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        storage_min_charge:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: y}


#BEV exogenous variables
BEV_level_min:        #to be multiplied by BEV sorage capacity [kWh] to obtain min BEV SOC 
    name: BEV_level_min
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        BEV_level_min:
            rows:
                set: techs
                filters: {BEV: y}

BEV_level_max:        #to be multiplied by BEV sorage capacity [kWh] to obtain max BEVSOC 
    name: BEV_level_max
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        BEV_level_max:
            rows:
                set: techs
                filters: {BEV: y}

BEV_level_start:        #to be multiplied by BEV sorage capacity [kWh] to obtain starting point of BEV SOC 
    name: BEV_level_start
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        BEV_level_start:
            rows:
                set: techs
                filters: {BEV: y}

BEV_vector:
    name: BEV_vector
    type: exogenous
    coordinates: [scenarios,techs,activities]
    variables_info:
        BEV_vector:
            rows:
                set: activities
            cols:
                set: techs
                filters: {BEV: y}

loss_factors:
    name: loss(cooling) factor for each storage technology
    type: exogenous
    coordinates: [scenarios,techs]
    variables_info:
        loss_factors:
            rows:
                set: techs
        loss_factors_t:
            intra:
                set: techs
                filters: {storage: y}
        loss_factors_BEV:
            intra:
                set: techs
                filters: {BEV: y}

n_hours:                        #scalar to give as input to T_hh_cool
    name: number of hours
    type: exogenous 
    coordinates: [scenarios] 
    variables_info:
        n_hours: 

n_years:                        #scalar to give as input to power_vector for NPC
    name: number of years
    type: exogenous 
    coordinates: [scenarios] 
    variables_info:
        n_years: 

disc_frac:                        #Scalar: 1/(1+r)
    name: Discount rate fraction
    type: exogenous 
    coordinates: [scenarios] 
    variables_info:
        disc_frac: 
# -----------------------------------------------------------------------------
# endogenous variables
Q:
    name: Q
    type: endogenous
    coordinates: [scenarios,time_hour,needs]
    variables_info:
        Q:
            rows:
                set: time_hour
            cols:
                set: needs

X:
    name: X
    type: endogenous
    coordinates: [scenarios,time_hour,activities]
    variables_info:
        X:
            rows:
                set: time_hour
            cols:
                set: activities
        X_storage:
            rows:
                set: time_hour
            cols:
                set: activities
                filters: {storage: y}
        X_no_stor:
            rows:
                set: time_hour
            cols:
                set: activities
                filters: {storage: n}
        X_season:
            rows:
                set: time_hour
            cols:
                set: activities
                filters: {seasonal: y}
        X_no_peak:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: activities

curtail:
    name: curtail
    type: endogenous
    coordinates: [scenarios,time_hour,needs]
    variables_info:
        curtail:
            rows:
                set: needs
            cols:
                set: time_hour
        curtail_peak:
            rows:
                set: needs
            cols:
                set: time_hour
                filters: {peak: y}

new_units:
    name: new_units #integer variable
    type: endogenous_integer
    coordinates: [scenarios,techs]
    variables_info:
        new_units:
            cols:
                set: techs

cap_new:
    name: cap_new
    type: endogenous_integer
    coordinates: [scenarios,techs]
    variables_info:
        cap_new:
            cols:
                set: techs
        cap_new_BEV:
            cols:
                set: techs
                filters: {BEV: y}

cost_op_hours:
    name: cost_op_hours
    type: endogenous
    coordinates: [scenarios,time_hour,activities]
    variables_info:
        cost_op_hours:
            rows:
                set: time_hour
            cols:
                set: activities

cost_op_tot:
    name: cost_op_tot
    type: endogenous
    coordinates: [scenarios,activities]
    variables_info:
        cost_op_tot:
            cols:
                set: activities

X_t:
    name: X_agg_techs
    type: endogenous
    coordinates: [scenarios,time_hour,techs]
    variables_info:
        X_t:
            rows:
                set: time_hour
            cols:
                set: techs
        X_t_no_stor:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: n}
        X_t_stor:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: y}
        X_t_stor_t:
            rows:
                set: time_hour
                filters: {peak: n}
            intra:
                set: techs
                filters: {storage: y}
        X_t_stor_all:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: y}

X_max:
    name: X_max
    type: endogenous
    coordinates: [scenarios,time_hour,techs]
    variables_info:
        X_max:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: n}

cap_tot:                                  
    name: cap_tot                     
    type: endogenous                        
    coordinates: [scenarios,techs]               
    variables_info:                         
        cap_tot:                          
            cols:                           
                set: techs 
        cap_tot_no_stor:                          
            cols:                           
                set: techs 
                filters: {storage: n}
        cap_tot_stor:
            cols:
                set: techs
                filters: {storage: y}
        cap_tot_BEV:
            cols:
                set: techs
                filters: {BEV: y}

#Thermal insulation
insulation:                 
    name: thermal insulation    #Should be binary: 1 if is installed, 0 if isnt
    type: endogenous
    coordinates: [scenarios]
    variables_info:
        insulation:

TI:        #0 for all needs except cold (value between [0,1]) and heat (value between [-1,0])
    name: Thermal Insulation effect 
    type: endogenous
    coordinates: [scenarios,needs]
    variables_info:
        TI:
            rows:
                set: needs

#Seasonal activities
act_capacity:
    name: total capacity per activity
    type: endogenous
    coordinates: [scenarios,activities]
    variables_info:
        act_capacity:
            cols:
                set: activities
        season_capacity:
            cols:
                set: activities
                filters: {seasonal: y}   

season_limit:
    name: seasonal activity limit
    type: endogenous
    coordinates: [scenarios,activities,time_hour]
    variables_info:
        season_limit:
            rows:
                set: time_hour
            cols:
                set: activities
                filters: {seasonal: y}

#STORAGE
SOC_min:        #valore minimo del livelo di storage [kWh]
    name: SOC_min
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        SOC_min:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {storage: y}

SOC_max:        #valore massimo del livelo di storage [kWh]
    name: SOC_max
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        SOC_max:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {storage: y}

SOC_start:        #valore iniziale del livelo di storage [kWh], anche se definito per tutti i tempi, vale solo per la prima ora
    name: SOC_start
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        SOC_start:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {storage: y}
        SOC_start_t:
            rows:
                set: time_hour
                filters: {peak: n}
            intra:
                set: techs
                filters: {storage: y}

SOC:
    name: SOC
    type: endogenous
    coordinates: [scenarios,time_hour,techs]
    variables_info:
        SOC:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {storage: y}
        SOC_t:
            rows:
                set: time_hour
                filters: {peak: n}
            intra:
                set: techs
                filters: {storage: y}    


max_disch:        #valore massimo per X dello storage= massima scarica [kW]
    name: max_disch
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        max_disch:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: y}

min_charge:        #valore minimo (negativo) per X dello storage= massimo valore assoluto di carica [kW]
    name: min_charge
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        min_charge:
            rows:
                set: time_hour
            cols:
                set: techs
                filters: {storage: y}

# SOC_start_cool: #controllo per la prima parte di SOC
#     name: SOC_start_cool
#     type: endogenous
#     coordinates: [scenarios,techs,time_hour]
#     variables_info:
#         SOC_start_cool:
#             rows:
#                 set: time_hour
#             cols:
#                 set: techs
#                 filters: {storage: y}

# SOC_second_part: #controllo per la seconda parte di SOC
#     name: SOC_second_part
#     type: endogenous
#     coordinates: [scenarios,activities,time_hour]
#     variables_info:
#         SOC_second_part:
#             rows:
#                 set: time_hour
#             cols:
#                 set: activities
#                 filters: {storage: y}


#BEV endogenous variables
BEV_SOC_min:
    name: BEV_SOC_min
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        BEV_SOC_min:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {BEV: y}

BEV_SOC_max: 
    name: BEV_SOC_max
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        BEV_SOC_max:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {BEV: y}

BEV_SOC_start:
    name: BEV_SOC_start
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        BEV_SOC_start:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {BEV: y}

# intermedio_BEV:
#     name: intermedio_BEV
#     type: endogenous
#     coordinates: [scenarios,techs,time_hour]
#     variables_info:
#         intermedio_BEV:
#             rows:
#                 set: time_hour
#                 filters: {peak: n}
#             cols:
#                 set: techs
#                 filters: {BEV: y}

BEV_SOC:
    name: BEV_SOC
    type: endogenous
    coordinates: [scenarios,techs,time_hour]
    variables_info:
        BEV_SOC:
            rows:
                set: time_hour
                filters: {peak: n}
            cols:
                set: techs
                filters: {BEV: y}

# -----------------------------------------------------------------------------
# constants variables

I_ta:               
    name: special identity matrix for activities aggregation into technologies
    type: constant
    coordinates: [techs,activities]
    variables_info:
        I_ta:
            value: identity_rcot
            rows: 
                set: techs
            cols:
                set: activities

# T_hh:
#     name: Lower triangular matrix (used to depict storage state of charge)
#     type: constant 
#     coordinates: [time_hour] 
#     variables_info:
#         T_hh: 
#             value: lower_triangular
#             rows: 
#                 set: time_hour
#                 filter: {peak: n}
#             cols:
#                 set: time_hour
#                 filter: {peak: n}

N_ones:
     name: Vector of 1s as long as needs
     type: constant 
     coordinates: [scenarios, needs] 
     variables_info:
         N_ones: 
             value: sum_vector
             cols:
                 set: needs

H_ones:
     name: Vector of 1s as long as hours
     type: constant 
     coordinates: [scenarios, time_hour] 
     variables_info:
        H_ones: 
             value: sum_vector
             rows:
                 set: time_hour
                 filters: {peak: n}

I_dh: 
    name: special identity matrix for hours aggregation into days
    type: constant
    coordinates: [days, time_hour]
    variables_info:
        I_dh:
            value: identity_rcot
            rows: 
                set: days
            cols:
                set: time_hour

