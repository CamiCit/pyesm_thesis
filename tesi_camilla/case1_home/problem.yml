# SYMBOLIC PROBLEM

objective:                  # (optional) definition of the objective function
    #- Minimize( (sum(cost_op_tot) + cost_period @ tran(active_techs) + cost_cap @ tran(cap_tot) ) * sum(power_vector(n_years,disc_frac)) + cost_inv @ tran(new_units) + insulation @ TI_cost)         # Minimize() or Maximize() with a scalar obj expression
    - Minimize(cost_op_year * sum(power_vector(n_years,disc_frac)) + cost_inv_tot) 

expressions:                # definition of additional expressions (equalities/inequalities)   
    - tran(Q) - u @ tran(X) - diag(TI) @ Y - curtail == 0
    - d @ tran(X) - tran(Q)== 0
    - TI == N_ones + mult(tran(TI_param),insulation)
    - X_t == X @ tran(I_ta)
    - X_max == cf @ diag(cap_tot_no_stor)
    - X_max - X_t_no_stor >= 0
    - X_no_stor >= 0 #all X must be positive, except the storage, and Q is all positive (except storage and export thanks to diagonal d)
    - new_units >= 0
    - curtail >= 0
    - cap_new == new_units @ diag(cap_units)
    - insulation >= 0
    - 1 - insulation >= 0  #To make binary an integer variable
    - cap_tot == cap_new + cap_i
    - cost_op_hours == X @ diag(cost_op)
    - cost_op_tot == (days_per_type @ I_dh) @ cost_op_hours
    - cost_op_year == cost_op_tot @ A_ones + cost_period @ tran(active_techs) + cost_cap @ tran(cap_tot) 
    -max_opex - cost_op_year >=0
    - cost_inv_tot == cost_inv @ tran(new_units) + insulation @ TI_cost
    -max_capex - cost_inv_tot >=0
    - X @ Act_constr >= 0 #in order to export only electricity from PV or storage, and only store electricity from PV
    - curtail_peak == 0 #as peak_hour is not part of cost computation, there is risk of useless curtailment
    - X_stor_peak ==0 #No available storage during peak hour
    #Seasonal activities
    - act_capacity == cap_tot @ I_ta
    - season_limit == mult(sf,season_capacity)
    - season_limit - X_season >= 0
    #Set active_techs as a binary variable, active according to cap_tot
    - active_techs >= 0
    - active_techs <= 1
    - H_ones_row @ X_t - active_techs >= 0 
    - active_techs * 1000000 - H_ones_row @ X_t >= 0

    #STORAGE equations
    - max_disch == mult(storage_max_disch,cap_tot_stor)
    - min_charge == mult(storage_min_charge,cap_tot_stor) 
    - max_disch - X_t_stor >= 0 
    - X_t_stor - min_charge >= 0
    - SOC_max == H_ones @ mult(cap_tot_stor, tran(storage_max))
    - SOC_min == H_ones @ mult(cap_tot_stor, tran(storage_min))
    - SOC_start == H_ones @ mult(cap_tot_stor, tran(storage_start))
    - SOC_t == mult(SOC_start_t,power_vector(n_hours,loss_factors_t)) - power_tri(n_hours,loss_factors_t) @ X_t_stor_t
    - SOC - SOC_min >= 0
    - SOC_max - SOC >= 0

    #BEV equations
    - BEV_SOC_max == H_ones @ mult(cap_tot_BEV, tran(BEV_level_max))
    - BEV_SOC_min == H_ones @ mult(cap_tot_BEV, tran(BEV_level_min))
    - BEV_SOC_start == H_ones @ mult(cap_tot_BEV, tran(BEV_level_start))
    - BEV_SOC == BEV_SOC_start - power_tri(n_hours,loss_factors_BEV) @ (X_no_peak @ BEV_vector)
    - BEV_SOC_max - BEV_SOC >= 0
    - BEV_SOC - BEV_SOC_min >= 0
   